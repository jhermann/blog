<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://jhermann.github.io/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jhermann.github.io/blog/" rel="alternate" type="text/html" /><updated>2020-07-17T01:49:57-05:00</updated><id>https://jhermann.github.io/blog/feed.xml</id><title type="html">Snakes on Callisto</title><subtitle>Python · Jupyter(Hub) · DevSecOps · Software Architecture · Systems Design · Distributed Systems</subtitle><entry><title type="html">Packaging Python Applications for Debian</title><link href="https://jhermann.github.io/blog/python/devops/2020/03/28/dh_virtualenv_howto.html" rel="alternate" type="text/html" title="Packaging Python Applications for Debian" /><published>2020-03-28T00:00:00-05:00</published><updated>2020-03-28T00:00:00-05:00</updated><id>https://jhermann.github.io/blog/python/devops/2020/03/28/dh_virtualenv_howto</id><content type="html" xml:base="https://jhermann.github.io/blog/python/devops/2020/03/28/dh_virtualenv_howto.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-03-28-dh_virtualenv_howto.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/copied_from_nb/img/python/dh-virtualenv.png&quot; alt=&quot;Cover Image&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;This post shows how to easily deploy any Python application in form of an ‘omnibus’
Debian package, i.e. one that contains all the application's dependencies, just like
in a Java WAR. A basic understanding of Debian packaging, the Linux command prompt,
and Python tooling is assumed.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Introduction&quot;&gt;Introduction&lt;a class=&quot;anchor-link&quot; href=&quot;#Introduction&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In this article, I'll show how to use &lt;code&gt;dh-virtualenv&lt;/code&gt; to create self-contained Debian packages to deploy a Python application. The resulting package is very similar to a &lt;em&gt;executable JAR&lt;/em&gt; that you can start via &lt;code&gt;java -jar&lt;/code&gt;, in that it contains all the moving parts except Python itself, without influencing or being influenced by version requirements of other applications. This also frees you from being restricted to the dependencies and their versions found on your target platforms, and makes porting to several different target environments easier.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;The advantage of using a Debian package for deployment as opposed to the native Python tool chain is that you are less dependent on typical development tools and services, i.e. to deploy to QA or production environments you need neither Internet access nor any compiler suites (for extension packages). To achieve the same with direct use of &lt;code&gt;virtualenv&lt;/code&gt; and &lt;code&gt;pip&lt;/code&gt;, you'd need to have an in-house PyPI repository accessible from production networks, and also release any extension packages as wheels pre-built for the target platform. Removing and updating an application is also much easier with Debian packages.&lt;/p&gt;
&lt;p&gt;To use &lt;code&gt;dh-virtualenv&lt;/code&gt;, you just have to extend your existing application project with a &lt;code&gt;debian&lt;/code&gt; subdirectory – project meta-data like &lt;code&gt;pip&lt;/code&gt; requirements and so on will be leveraged to build the final package, i.e. common tasks are delegated to the standard Python eco-system.&lt;/p&gt;
&lt;p&gt;Note that just like with any other form of omnibus packaging, you take over the responsibility to release security updates of the contained dependencies in a timely manner.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;How-does-it-work?&quot;&gt;How does it work?&lt;a class=&quot;anchor-link&quot; href=&quot;#How-does-it-work?&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;dh-virtualenv&lt;/code&gt; is a &lt;em&gt;debhelper&lt;/em&gt; plugin that extends the normal Debian tool chain for package building with the ability to create a Python &lt;a href=&quot;https://virtualenv.pypa.io/&quot;&gt;virtualenv&lt;/a&gt; (an isolated Python environment), and then wrap that into the final Debian package.&lt;/p&gt;
&lt;p&gt;Depending on the details of the application, you often also have to provide some kind of configuration of the software itself, and possibly some means to run it as a service. This can be done in several ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add a &lt;code&gt;debian/«pkg».install&lt;/code&gt; descriptor to add configuration files to the Debian package.&lt;/li&gt;
&lt;li&gt;provide a Puppet recipe or Ansible playbook that deploys the package and integrates it into the system.&lt;/li&gt;
&lt;li&gt;embed (default) configuration into the application's Python package (via the &lt;code&gt;include_package_data&lt;/code&gt; option of &lt;code&gt;setuptools&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All those can be combined, e.g. provide defaults via Python package data, and then add external configuration that only provides values specific to the concrete host installation.&lt;/p&gt;
&lt;p&gt;A real-world example is the &lt;a href=&quot;https://github.com/jhermann/devpi-puppet/blob/master/templates/supervisord.conf&quot;&gt;devpi supervisor ERB template&lt;/a&gt; that serves both the purpose of passing configuration to the application process (via command line options), and also starting and controlling that process (i.e. handle demonization and automatic startup on boot).&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Installing-the-build-tools&quot;&gt;Installing the build tools&lt;a class=&quot;anchor-link&quot; href=&quot;#Installing-the-build-tools&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Unsurprisingly, you need to &lt;a href=&quot;http://dh-virtualenv.readthedocs.org/en/latest/tutorial.html#step-1-install-dh-virtualenv&quot;&gt;install dh-virtualenv&lt;/a&gt; to use it. Since it is architecture independant, you can choose to use a &lt;a href=&quot;https://packages.debian.org/sid/dh-virtualenv&quot;&gt;recent release offered by Debian sid&lt;/a&gt; whatever your build platform is.&lt;/p&gt;
&lt;p&gt;If this is your first time to build a Debian package, you also need to add the basic tools for that:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install build-essential debhelper devscripts equivs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, to take advantage of the available template for easily adding an inital &lt;code&gt;debian&lt;/code&gt; directory, &lt;a href=&quot;https://github.com/Springerle/springerle.github.io#installing-the-cookiecutter-cli&quot;&gt;install the cookiecutter tool&lt;/a&gt;. Note that you can opt to &lt;a href=&quot;https://dockyard.readthedocs.io/en/latest/packaging-howto.html&quot;&gt;build packages in a Docker container&lt;/a&gt; instead, with only Docker as a requirement on your build host.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Packaging-an-example-project&quot;&gt;Packaging an example project&lt;a class=&quot;anchor-link&quot; href=&quot;#Packaging-an-example-project&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;To add the necessary &lt;code&gt;debian&lt;/code&gt; directory with minimal effort, you can use the
&lt;a href=&quot;https://github.com/Springerle/dh-virtualenv-mold#dh-virtualenv-mold&quot;&gt;dh-virtualenv-mold&lt;/a&gt;
cookiecutter. The following commands basically repeat what the &lt;a href=&quot;https://github.com/Springerle/dh-virtualenv-mold/blob/master/test.sh&quot;&gt;integration test&lt;/a&gt; script of that project does, namely instantiate a Python project and then add debianization on top of it.&lt;/p&gt;
&lt;p&gt;To provide common defaults to &lt;code&gt;cookiecutter&lt;/code&gt;, it makes sense to have a &lt;code&gt;~/.cookiecutterrc&lt;/code&gt; file similar to &lt;a href=&quot;https://github.com/jhermann/ruby-slippers/blob/master/home/.cookiecutterrc&quot;&gt;the one I use&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Let's first create a sample project:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p ~/tmp/dh-venv-blog
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/tmp/dh-venv-blog
cookiecutter --no-input &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://github.com/borntyping/cookiecutter-pypackage-minimal.git&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; cookiecutter_pypackage_minimal/
python3 setup.py build
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can of course also use one of your own, then just check that out instead. Next, we add the &lt;code&gt;debian&lt;/code&gt; directory:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cookiecutter --no-input &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://github.com/Springerle/dh-virtualenv-mold.git&amp;quot;&lt;/span&gt;
dch -r &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# insert proper date &amp;amp; distro&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using &lt;code&gt;--no-input&lt;/code&gt; causes the template's defaults to be accepted – it avoids answering all the template's prompts. After all, this is just a demo not requiring sensible inputs. Take the time to have a look at what's in the &lt;code&gt;debian&lt;/code&gt; directory.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;You're now able to build the package and if that succeeds, print the contained meta data:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dpkg-buildpackage -uc -us -b
dpkg-deb -I ../pyvenv-foobar_*.deb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The last command should show you something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Package: pyvenv-foobar&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Version: 0.1.0&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Architecture: amd64&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Maintainer: Jürgen Hermann &amp;lt;jh@web.de&amp;gt;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Installed-Size: 12877&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Pre-Depends: dpkg (&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1.16.1), python3, python3-venv&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Section: contrib/python&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Priority: extra&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Homepage: https://github.com/jschmoe/foobar&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Description: A Python package and its dependencies packaged up as DEB in an isolated virtualenv.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, install the new package via &lt;code&gt;dpkg -i&lt;/code&gt;, or upload it to a repository and use it from there with &lt;code&gt;apt&lt;/code&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Real-world-examples&quot;&gt;Real-world examples&lt;a class=&quot;anchor-link&quot; href=&quot;#Real-world-examples&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;These are examples of &lt;code&gt;dh-virtualenv&lt;/code&gt; packaging for non-trivial applications:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jhermann/devpi-enterprisey/tree/master/debianized-devpi#readme&quot;&gt;devpi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ekalinin/nodeenv/tree/master/debian-upstream&quot;&gt;nodeenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/1and1/debianized-sentry#readme&quot;&gt;debianized-sentry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/1and1/debianized-jupyterhub#readme&quot;&gt;jupyterhub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last two show how to integrate Python web applications into &lt;code&gt;systemd&lt;/code&gt;, instead of using &lt;code&gt;supervisor&lt;/code&gt; like the &lt;code&gt;devpi&lt;/code&gt; example. The &lt;code&gt;jupyterhub&lt;/code&gt; one also demonstrates the integration of a Python project with server-side Javascript (in a NodeJS environment).&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jürgen Hermann</name><email>jh@web.de</email></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jhermann.github.io/blog/images/copied_from_nb/img/python/dh-virtualenv.png" /><media:content medium="image" url="https://jhermann.github.io/blog/images/copied_from_nb/img/python/dh-virtualenv.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Embedding Graphs Into Your Sphinx Documents</title><link href="https://jhermann.github.io/blog/python/documentation/2020/03/25/sphinx_ext_graphviz.html" rel="alternate" type="text/html" title="Embedding Graphs Into Your Sphinx Documents" /><published>2020-03-25T00:00:00-05:00</published><updated>2020-03-25T00:00:00-05:00</updated><id>https://jhermann.github.io/blog/python/documentation/2020/03/25/sphinx_ext_graphviz</id><content type="html" xml:base="https://jhermann.github.io/blog/python/documentation/2020/03/25/sphinx_ext_graphviz.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-03-25-sphinx_ext_graphviz.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/copied_from_nb/img/python/sphinx-ext-graphviz.png&quot; alt=&quot;Cover Image&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.sphinx-doc.org/en/master/usage/extensions/graphviz.html&quot;&gt;sphinx.ext.graphviz&lt;/a&gt; extension allows you to directly embed GraphViz ‘dot language’ graphs into your document files. They are then rendered to PNG or SVG images, which get added to your generated HTML documentation. Using SVG allows you to hot-link your nodes to any HTTP resource.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Before use, you have to activate the extension with just a few changes to your &lt;code&gt;docs/conf.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extensions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;sphinx.ext.graphviz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# -- GraphViz configuration ----------------------------------&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;graphviz_output_format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;svg&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;This is an example for what you can then add to your documentation:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/copied_from_nb/img/python/sphinx-ext-graphviz-sample.svg&quot; alt=&quot;Sphinx and GraphViz Data Flow&quot; /&gt;&lt;/p&gt;
&lt;p&gt;As long as the nodes have a &lt;code&gt;href&lt;/code&gt; attribute, the SVG rendering contains them and thus node labels become clickable hyperlinks.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;And here's the related markup that needs to be added to one of your &lt;code&gt;.rst&lt;/code&gt; files:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;graphviz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;:name:&lt;/span&gt; sphinx.ext.graphviz
    &lt;span class=&quot;nc&quot;&gt;:caption:&lt;/span&gt; Sphinx and GraphViz Data Flow
    &lt;span class=&quot;nc&quot;&gt;:alt:&lt;/span&gt; How Sphinx and GraphViz Render the Final Document
    &lt;span class=&quot;nc&quot;&gt;:align:&lt;/span&gt; center

     digraph &amp;quot;sphinx-ext-graphviz&amp;quot; {
         size=&amp;quot;6,4&amp;quot;;
         rankdir=&amp;quot;LR&amp;quot;;
         graph [fontname=&amp;quot;Verdana&amp;quot;, fontsize=&amp;quot;12&amp;quot;];
         node [fontname=&amp;quot;Verdana&amp;quot;, fontsize=&amp;quot;12&amp;quot;];
         edge [fontname=&amp;quot;Sans&amp;quot;, fontsize=&amp;quot;9&amp;quot;];

         sphinx [label=&amp;quot;Sphinx&amp;quot;, shape=&amp;quot;component&amp;quot;,
                   href=&amp;quot;https://www.sphinx-doc.org/&amp;quot;,
                   target=&amp;quot;_blank&amp;quot;];
         dot [label=&amp;quot;GraphViz&amp;quot;, shape=&amp;quot;component&amp;quot;,
              href=&amp;quot;https://www.graphviz.org/&amp;quot;,
              target=&amp;quot;_blank&amp;quot;];
         docs [label=&amp;quot;Docs (.rst)&amp;quot;, shape=&amp;quot;folder&amp;quot;,
               fillcolor=green, style=filled];
         svg_file [label=&amp;quot;SVG Image&amp;quot;, shape=&amp;quot;note&amp;quot;, fontcolor=white,
                 fillcolor=&amp;quot;#3333ff&amp;quot;, style=filled];
         html_files [label=&amp;quot;HTML Files&amp;quot;, shape=&amp;quot;folder&amp;quot;,
              fillcolor=yellow, style=filled];

         docs -&amp;gt; sphinx [label=&amp;quot; parse &amp;quot;];
         sphinx -&amp;gt; dot [label=&amp;quot; call &amp;quot;, style=dashed, arrowhead=none];
         dot -&amp;gt; svg_file [label=&amp;quot; draw &amp;quot;];
         sphinx -&amp;gt; html_files [label=&amp;quot; render &amp;quot;];
         svg_file -&amp;gt; html_files [style=dashed];
     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For all this to work, you need the &lt;a href=&quot;https://www.graphviz.org/&quot;&gt;GraphViz suite of tools&lt;/a&gt; installed on the machine that renders the documentation.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jürgen Hermann</name><email>jh@web.de</email></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jhermann.github.io/blog/images/copied_from_nb/img/python/sphinx-ext-graphviz.png" /><media:content medium="image" url="https://jhermann.github.io/blog/images/copied_from_nb/img/python/sphinx-ext-graphviz.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Using Python3’s ‘venv’ with tox</title><link href="https://jhermann.github.io/blog/python/testing/2020/03/21/tox_venv.html" rel="alternate" type="text/html" title="Using Python3's ‘venv’ with tox" /><published>2020-03-21T00:00:00-05:00</published><updated>2020-03-21T00:00:00-05:00</updated><id>https://jhermann.github.io/blog/python/testing/2020/03/21/tox_venv</id><content type="html" xml:base="https://jhermann.github.io/blog/python/testing/2020/03/21/tox_venv.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-03-21-tox_venv.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/copied_from_nb/img/python/tox-venv.png&quot; alt=&quot;Cover Image&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;&lt;code&gt;tox&lt;/code&gt; is a generic virtualenv management and test command line tool, especially useful for multi-environment testing. It has a plugin architecture, with plenty of both built-in and 3rd party extensions.&lt;/p&gt;
&lt;p&gt;This post assumes you are already familiar with &lt;code&gt;tox&lt;/code&gt; and have a working configuration for it. If not, check out &lt;a href=&quot;https://tox.readthedocs.io/&quot;&gt;its documentation&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;In order to make &lt;code&gt;tox&lt;/code&gt; use the built-in virtual environment &lt;code&gt;venv&lt;/code&gt; of Python 3.3+, there is a plugin named &lt;a href=&quot;https://pypi.org/project/tox-venv/&quot;&gt;tox-venv&lt;/a&gt; that switches from using &lt;code&gt;virtualenv&lt;/code&gt; to &lt;code&gt;venv&lt;/code&gt; whenever it is available.&lt;/p&gt;
&lt;p&gt;Typically, &lt;code&gt;venv&lt;/code&gt; is more robust when faced with ever-changing runtime environments and versions of related tooling (&lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;setuptools&lt;/code&gt;, …).&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;To enable that plugin, add this to your &lt;code&gt;tox.ini&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;[tox]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tox-venv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That merely triggers &lt;code&gt;tox&lt;/code&gt; to check (on startup) that the plugin is installed. You still have to add it to your &lt;code&gt;dev-requirements.txt&lt;/code&gt; or a similar file, so it gets installed together with &lt;code&gt;tox&lt;/code&gt;. You can also install &lt;code&gt;tox&lt;/code&gt; globally using &lt;code&gt;dephell jail install tox tox-venv&lt;/code&gt; – see the &lt;a href=&quot;https://jhermann.github.io/blog/python/deployment/2020/03/03/install_tools_with_dephell.html&quot;&gt;related post&lt;/a&gt; in this blog for details.&lt;/p&gt;
&lt;p&gt;The end result is this (call &lt;code&gt;tox -v&lt;/code&gt; to see those messages):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;py38 create: …/.tox/py38
  …/.tox$ /usr/bin/python3.8 -m venv py38 &amp;gt;…/log/py38-0.log&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And there you have it, no more virtualenv package needed. 🎉 🎊&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jürgen Hermann</name><email>jh@web.de</email></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jhermann.github.io/blog/images/copied_from_nb/img/python/tox-venv.png" /><media:content medium="image" url="https://jhermann.github.io/blog/images/copied_from_nb/img/python/tox-venv.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Using R-style Data Pipelines in Notebooks</title><link href="https://jhermann.github.io/blog/python/data-science/2020/03/17/data_pipes.html" rel="alternate" type="text/html" title="Using R-style Data Pipelines in Notebooks" /><published>2020-03-17T00:00:00-05:00</published><updated>2020-03-17T00:00:00-05:00</updated><id>https://jhermann.github.io/blog/python/data-science/2020/03/17/data_pipes</id><content type="html" xml:base="https://jhermann.github.io/blog/python/data-science/2020/03/17/data_pipes.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-03-17-data_pipes.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/copied_from_nb/img/data-science/data-pipes.png&quot; alt=&quot;Cover Image&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Overview&quot;&gt;Overview&lt;a class=&quot;anchor-link&quot; href=&quot;#Overview&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This post shows how mutating data frames can be written more elegantly (and thus understood more easily) by using &lt;em&gt;data pipelines&lt;/em&gt;. R users know this concept from the &lt;code&gt;dplyr&lt;/code&gt; package, and Python offers a similar one named &lt;code&gt;dfply&lt;/code&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Setting-the-Stage&quot;&gt;Setting the Stage&lt;a class=&quot;anchor-link&quot; href=&quot;#Setting-the-Stage&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We start off with some global definitions…&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;The sample data (about OS package deployments) is read into the &lt;code&gt;raw_data&lt;/code&gt; dataframe from a CSV file.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;../assets/data/cmdb-packages.csv&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;♯ of Records: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Last &amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fillna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;raw_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transpose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;♯ of Records: 146

Distribution = [&amp;#39;Debian 8.11&amp;#39;, &amp;#39;Debian 8.6&amp;#39;, &amp;#39;Debian 8.9&amp;#39;, &amp;#39;jessie&amp;#39;]
Architecture = [&amp;#39;amd64&amp;#39;]
Environment = [&amp;#39;&amp;#39;, &amp;#39;Canary&amp;#39;, &amp;#39;DEV&amp;#39;, &amp;#39;LIVE&amp;#39;, &amp;#39;QA&amp;#39;]
Team = [&amp;#39;Automation&amp;#39;, &amp;#39;Big Data&amp;#39;, &amp;#39;Email&amp;#39;, &amp;#39;Ops App1&amp;#39;, &amp;#39;Ops Linux&amp;#39;, &amp;#39;Persistence&amp;#39;, &amp;#39;Platform&amp;#39;]
Installed version = [&amp;#39;41.15-2(amd64)&amp;#39;, &amp;#39;42.28-2(amd64)&amp;#39;, &amp;#39;42.44-1(amd64)&amp;#39;, &amp;#39;45.11-1(amd64)&amp;#39;, &amp;#39;48.33-1(amd64)&amp;#39;]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_area&quot;&gt;


&lt;div class=&quot;output_html rendered_html output_subarea output_execute_result&quot;&gt;
&lt;div&gt;
&lt;style scoped=&quot;&quot;&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;
  &lt;thead&gt;
    &lt;tr style=&quot;text-align: right;&quot;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;2&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;CMDB_Id&lt;/th&gt;
      &lt;td&gt;274656589&lt;/td&gt;
      &lt;td&gt;153062618&lt;/td&gt;
      &lt;td&gt;282201163&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Distribution&lt;/th&gt;
      &lt;td&gt;jessie&lt;/td&gt;
      &lt;td&gt;jessie&lt;/td&gt;
      &lt;td&gt;jessie&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Architecture&lt;/th&gt;
      &lt;td&gt;amd64&lt;/td&gt;
      &lt;td&gt;amd64&lt;/td&gt;
      &lt;td&gt;amd64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Environment&lt;/th&gt;
      &lt;td&gt;DEV&lt;/td&gt;
      &lt;td&gt;DEV&lt;/td&gt;
      &lt;td&gt;LIVE&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Team&lt;/th&gt;
      &lt;td&gt;Ops App1&lt;/td&gt;
      &lt;td&gt;Ops App1&lt;/td&gt;
      &lt;td&gt;Ops App1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Last seen&lt;/th&gt;
      &lt;td&gt;2019-02-18 11:43&lt;/td&gt;
      &lt;td&gt;2019-02-18 11:56&lt;/td&gt;
      &lt;td&gt;2019-02-18 12:04&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Last modified&lt;/th&gt;
      &lt;td&gt;2019-02-18 11:43&lt;/td&gt;
      &lt;td&gt;2019-02-18 11:56&lt;/td&gt;
      &lt;td&gt;2019-02-18 12:04&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Installed version&lt;/th&gt;
      &lt;td&gt;42.28-2(amd64)&lt;/td&gt;
      &lt;td&gt;42.28-2(amd64)&lt;/td&gt;
      &lt;td&gt;48.33-1(amd64)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map_distro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Helper to create canonical OS names.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Debian 7&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;wheezy&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Debian 8&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jessie&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Debian 9&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;stretch&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Debian 10&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;buster&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;squeeze&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Squeeze [6]&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;wheezy&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Wheezy [7]&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;jessie&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Jessie [8]&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;stretch&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Stretch [9]&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;buster&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Buster [10]&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Data-Cleaning-With-Pandas&quot;&gt;Data Cleaning With Pandas&lt;a class=&quot;anchor-link&quot; href=&quot;#Data-Cleaning-With-Pandas&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This code cleans up the imported data using the &lt;em&gt;Pandas&lt;/em&gt; API.&lt;/p&gt;
&lt;p&gt;To get sensible version statistics, we split off the auxiliary information in the version column (anything after &lt;code&gt;-&lt;/code&gt;), leaving just the &lt;em&gt;upstream&lt;/em&gt; part of the version string. The environment classifier is also cleaned up a little, and distributions are mapped to a canonical set of names. Some unused columns are dropped.&lt;/p&gt;
&lt;p&gt;Finally, a subset of unique version samples is selected.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_data&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Installed version&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fillna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;UNDEFINED&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Distribution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Distribution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map_distro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;CMDB_Id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Last seen&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Last modified&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Installed version&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drop_duplicates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Version&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;first&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transpose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;


&lt;div class=&quot;output_html rendered_html output_subarea output_execute_result&quot;&gt;
&lt;div&gt;
&lt;style scoped=&quot;&quot;&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;
  &lt;thead&gt;
    &lt;tr style=&quot;text-align: right;&quot;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;th&gt;26&lt;/th&gt;
      &lt;th&gt;45&lt;/th&gt;
      &lt;th&gt;62&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Distribution&lt;/th&gt;
      &lt;td&gt;Jessie [8]&lt;/td&gt;
      &lt;td&gt;Jessie [8]&lt;/td&gt;
      &lt;td&gt;Jessie [8]&lt;/td&gt;
      &lt;td&gt;Jessie [8]&lt;/td&gt;
      &lt;td&gt;Jessie [8]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Architecture&lt;/th&gt;
      &lt;td&gt;amd64&lt;/td&gt;
      &lt;td&gt;amd64&lt;/td&gt;
      &lt;td&gt;amd64&lt;/td&gt;
      &lt;td&gt;amd64&lt;/td&gt;
      &lt;td&gt;amd64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Environment&lt;/th&gt;
      &lt;td&gt;DEV&lt;/td&gt;
      &lt;td&gt;LIVE&lt;/td&gt;
      &lt;td&gt;LIVE&lt;/td&gt;
      &lt;td&gt;UNDEFINED&lt;/td&gt;
      &lt;td&gt;DEV&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Team&lt;/th&gt;
      &lt;td&gt;Ops App1&lt;/td&gt;
      &lt;td&gt;Ops App1&lt;/td&gt;
      &lt;td&gt;Platform&lt;/td&gt;
      &lt;td&gt;Email&lt;/td&gt;
      &lt;td&gt;Platform&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Version&lt;/th&gt;
      &lt;td&gt;42.28&lt;/td&gt;
      &lt;td&gt;48.33&lt;/td&gt;
      &lt;td&gt;41.15&lt;/td&gt;
      &lt;td&gt;45.11&lt;/td&gt;
      &lt;td&gt;42.44&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Data-Cleaning-With-Pipelines&quot;&gt;Data Cleaning With Pipelines&lt;a class=&quot;anchor-link&quot; href=&quot;#Data-Cleaning-With-Pipelines&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This does the exact same processing as the code above, but is arguably more readable and maintained more easily:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It has less boilerplate, and makes the use of pipelined processing transparent.&lt;/li&gt;
&lt;li&gt;Each step clearly states what it does to the data.&lt;/li&gt;
&lt;li&gt;When steps are copied into other pipelines, the &lt;code&gt;X&lt;/code&gt; placeholder ensures you use the data of &lt;em&gt;this&lt;/em&gt; pipeline (the code is more DRY)..&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dfply&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;piped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw_data&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Installed version&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fillna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;UNDEFINED&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Distribution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Distribution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map_distro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CMDB_Id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Last seen&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Last modified&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Installed version&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distinct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;piped&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transpose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;


&lt;div class=&quot;output_html rendered_html output_subarea output_execute_result&quot;&gt;
&lt;div&gt;
&lt;style scoped=&quot;&quot;&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;
  &lt;thead&gt;
    &lt;tr style=&quot;text-align: right;&quot;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;th&gt;26&lt;/th&gt;
      &lt;th&gt;45&lt;/th&gt;
      &lt;th&gt;62&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Distribution&lt;/th&gt;
      &lt;td&gt;Jessie [8]&lt;/td&gt;
      &lt;td&gt;Jessie [8]&lt;/td&gt;
      &lt;td&gt;Jessie [8]&lt;/td&gt;
      &lt;td&gt;Jessie [8]&lt;/td&gt;
      &lt;td&gt;Jessie [8]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Architecture&lt;/th&gt;
      &lt;td&gt;amd64&lt;/td&gt;
      &lt;td&gt;amd64&lt;/td&gt;
      &lt;td&gt;amd64&lt;/td&gt;
      &lt;td&gt;amd64&lt;/td&gt;
      &lt;td&gt;amd64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Environment&lt;/th&gt;
      &lt;td&gt;DEV&lt;/td&gt;
      &lt;td&gt;LIVE&lt;/td&gt;
      &lt;td&gt;LIVE&lt;/td&gt;
      &lt;td&gt;UNDEFINED&lt;/td&gt;
      &lt;td&gt;DEV&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Team&lt;/th&gt;
      &lt;td&gt;Ops App1&lt;/td&gt;
      &lt;td&gt;Ops App1&lt;/td&gt;
      &lt;td&gt;Platform&lt;/td&gt;
      &lt;td&gt;Email&lt;/td&gt;
      &lt;td&gt;Platform&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Version&lt;/th&gt;
      &lt;td&gt;42.28&lt;/td&gt;
      &lt;td&gt;48.33&lt;/td&gt;
      &lt;td&gt;41.15&lt;/td&gt;
      &lt;td&gt;45.11&lt;/td&gt;
      &lt;td&gt;42.44&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;The result is identical to the pure Pandas code, as expected.&lt;/p&gt;
&lt;p&gt;To learn more about &lt;code&gt;dfply&lt;/code&gt;, read the &lt;a href=&quot;https://towardsdatascience.com/dplyr-style-data-manipulation-with-pipes-in-python-380dcb137000&quot;&gt;dplyr-style Data Manipulation with Pipes in Python&lt;/a&gt; blog post, which has more examples.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Reference-Links&quot;&gt;Reference Links&lt;a class=&quot;anchor-link&quot; href=&quot;#Reference-Links&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;dfply&quot;&gt;dfply&lt;a class=&quot;anchor-link&quot; href=&quot;#dfply&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://towardsdatascience.com/dplyr-style-data-manipulation-with-pipes-in-python-380dcb137000&quot;&gt;dplyr-style Data Manipulation with Pipes in Python – Towards Data Science&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kieferk/dfply&quot;&gt;kieferk/dfply: dplyr-style piping operations for Pandas dataframes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Alternatives&quot;&gt;Alternatives&lt;a class=&quot;anchor-link&quot; href=&quot;#Alternatives&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/has2k1/plydata&quot;&gt;has2k1/plydata: A grammar for data manipulation in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/shaypal5/pdpipe&quot;&gt;shaypal5/pdpipe: Easy pipelines for Pandas dataframes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jürgen Hermann</name><email>jh@web.de</email></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jhermann.github.io/blog/images/copied_from_nb/img/data-science/data-pipes.png" /><media:content medium="image" url="https://jhermann.github.io/blog/images/copied_from_nb/img/data-science/data-pipes.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Packaging Software with ‘fpm’</title><link href="https://jhermann.github.io/blog/linux/deployment/2020/03/14/fpm_effing_package_managers.html" rel="alternate" type="text/html" title="Packaging Software with ‘fpm’" /><published>2020-03-14T00:00:00-05:00</published><updated>2020-03-14T00:00:00-05:00</updated><id>https://jhermann.github.io/blog/linux/deployment/2020/03/14/fpm_effing_package_managers</id><content type="html" xml:base="https://jhermann.github.io/blog/linux/deployment/2020/03/14/fpm_effing_package_managers.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-03-14-fpm_effing_package_managers.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/copied_from_nb/img/linux/fpm.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;What-it-does&quot;&gt;What it does&lt;a class=&quot;anchor-link&quot; href=&quot;#What-it-does&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Basically, ‘fpm’ allows you to deploy any software via OS packages,
from an installation tree on disk or from already built artifacts specific to
the chosen implementation language.&lt;/p&gt;
&lt;p&gt;The main advantage over native tooling is you do not need to know
about every minute detail of the involved commands and metafile formats
for every platform.
In case of Debian, that is at least the “control” and “rules” files,
and tools like “buildpackage” and “debhelpers”.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;How-to-install-it&quot;&gt;How to install it&lt;a class=&quot;anchor-link&quot; href=&quot;#How-to-install-it&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;‘fpm’ is written in Ruby and can thus be installed via &lt;code&gt;gem install&lt;/code&gt;.
But you can also run it with JRuby in a JVM,
that you might happen to already have on a host anyway.
Using JRuby spares you the headache of juggling multiple Ruby versions
and isolating gems against other Ruby applications.&lt;/p&gt;
&lt;p&gt;If you package it up that way, it also can be installed on any Linux release
because you only need a Java8 JRE installed to run it
– no native code involved. 
You can use the &lt;code&gt;fpm.sh&lt;/code&gt; script in the
&lt;a href=&quot;https://github.com/jhermann/priscilla&quot;&gt;priscilla&lt;/a&gt; project on GitHub
to package ‘fpm’ with itself. As written, it works for Debian derivatives,
but should be adaptable to other distros with a few changes
(remember, ‘fpm’ makes that easy).&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;If you call &lt;code&gt;./fpm.sh pkg&lt;/code&gt;, the package contents is created in
&lt;code&gt;build&lt;/code&gt; as a staging area, and when everything is ready, 
&lt;code&gt;fpm&lt;/code&gt; is called from within that staging area to create the final package:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;build/opt_tools_fpm/opt/tools/fpm/bin/fpm \
    -s dir -t deb -n opt-tools-fpm -v 1.11.0 \
    --iteration 1 --category tools \
    --deb-user root --deb-group root \
    -m '&quot;Juergen Hermann&quot; &amp;lt;jh@web.de&amp;gt;' \
    --license 'See contained license, or homepage' \
    --vendor github.com/jhermann/priscilla \
    --description 'fpm helps you build packages quickly and easily' \
    --url http://fpm.readthedocs.io/ \
    --workdir $PWD/build/opt_tools_fpm/tmp \
    -a all -d 'openjdk-8-jre|…|java8-runtime-headless' \
    opt usr

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yes, this is a mouthful, but still shorter than a &lt;code&gt;control&lt;/code&gt; or &lt;code&gt;.spec&lt;/code&gt; file,
and easily adapted to other package managers.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;This created a DEB file &lt;code&gt;./build/opt_tools_fpm/opt-tools-fpm_1.11.0-1_all.deb&lt;/code&gt;, with this metadata:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; new debian package, version 2.0.
 size 23763108 bytes: control archive= 30446 bytes.
     462 bytes,    12 lines      control              
  119039 bytes,  1118 lines      md5sums              
 Package: opt-tools-fpm
 Version: 1.11.0-1
 License: See contained license, or homepage
 Vendor: github.com/jhermann/priscilla
 Architecture: all
 Maintainer: &quot;Juergen Hermann&quot; &amp;lt;jh@web.de&amp;gt;
 Installed-Size: 27046
 Depends: openjdk-8-jre|zulu8|…|java8-runtime-headless
 Section: tools
 Priority: extra
 Homepage: http://fpm.readthedocs.io/
 Description: fpm helps you build packages quickly and easily

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The major part of files is installed into &lt;code&gt;/opt/tools/fpm&lt;/code&gt;,
but a symlink at &lt;code&gt;/usr/bin/fpm&lt;/code&gt; makes the command available on the path.&lt;/p&gt;
&lt;p&gt;Building fpm 1.11.0 that way was tested on Ubuntu Bionic using
openjdk-8-jre-headless 8u242.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;How-to-use-it&quot;&gt;How to use it&lt;a class=&quot;anchor-link&quot; href=&quot;#How-to-use-it&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There are a lot of source and target types available in fpm
(dir, gem, deb, npm, rpm, tar, cpan, pear, empty, puppet, python, osxpkg, solaris, 
p5p, pkgin, freebsd, apk, snap, pleaserun, zip, virtualenv, pacman, sh),
this example converts a Python workdir into a DEB package file.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/jhermann/rudiments&quot;&gt;rudiments&lt;/a&gt; project serves as the example here, but you can use any pure Python project built with setuptools. 
You have to clone the project and then call fpm like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;( deactivate 2&amp;gt;/dev/null; py=/usr/bin/python3; \
  fpm -s python -t deb --category python \
    --python-bin $py \
    --python-pip &quot;$py -m pip&quot; \
    --python-package-name-prefix &quot;$(basename $py)&quot; \
    --python-obey-requirements-txt \
    --python-install-data &quot;/usr/local/share/$(basename $py)/$($py ./setup.py --name)&quot; \
    -m &quot;\&quot;$($py ./setup.py --author)\&quot; &amp;lt;$($py ./setup.py --author-email)&amp;gt;&quot; \
    --vendor &quot;$($py ./setup.py --url | cut -f3-4 -d/)&quot; \
    --force $PWD/setup.py )

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;--force&lt;/code&gt; option overwrites an existing package file, so you can call the command multiple times without an error.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;If you inspect the built package with &lt;code&gt;dpkg-deb -I python3-rudiments_*_all.deb&lt;/code&gt;,
this is the output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; new Debian package, version 2.0.
 size 31062 bytes: control archive=1417 bytes.
     366 bytes,    12 lines      control              
    3789 bytes,    30 lines      md5sums              
 Package: python3-rudiments
 Version: 0.3.1
 License: Apache 2.0
 Vendor: github.com/jhermann
 Architecture: all
 Maintainer: &quot;Jürgen Hermann&quot; &amp;lt;jh@web.de&amp;gt;
 Installed-Size: 79
 Depends: python3-requests (&amp;gt;= 2.6)
 Section: python
 Priority: extra
 Homepage: https://github.com/jhermann/rudiments
 Description: Rudiments – Fundamental elements for any Python project.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;The package's content is placed into these directories:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/local/lib/python3.6
/usr/local/share/python3/rudiments
/usr/share/doc/python3-rudiments

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can install it using &lt;code&gt;dpkg -i …&lt;/code&gt; and then do a quick import test with this command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python3 -c &quot;import rudiments; print(rudiments)&quot;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Where-to-go-from-here&quot;&gt;Where to go from here&lt;a class=&quot;anchor-link&quot; href=&quot;#Where-to-go-from-here&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Read more about ‘fpm’ on its &lt;a href=&quot;https://github.com/jordansissel/fpm/wiki&quot;&gt;github wiki&lt;/a&gt;, or watch &lt;a href=&quot;http://goo.gl/sWs3Z&quot;&gt;this slide deck&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Credits: &lt;/em&gt; Package icon by &lt;a href=&quot;https://de.wikipedia.org/wiki/Datei:Breathe-package-x-generic.svg&quot;&gt;Breathe Icon Team: Sebastian Porta, Cory Kontros, Andrew Starr-Bochicchio&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jürgen Hermann</name><email>jh@web.de</email></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jhermann.github.io/blog/images/copied_from_nb/img/linux/fpm.png" /><media:content medium="image" url="https://jhermann.github.io/blog/images/copied_from_nb/img/linux/fpm.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Bundling Python Dependencies in a ZIP Archive</title><link href="https://jhermann.github.io/blog/python/deployment/2020/03/08/ship_libs_with_shiv.html" rel="alternate" type="text/html" title="Bundling Python Dependencies in a ZIP Archive" /><published>2020-03-08T00:00:00-06:00</published><updated>2020-03-08T00:00:00-06:00</updated><id>https://jhermann.github.io/blog/python/deployment/2020/03/08/ship_libs_with_shiv</id><content type="html" xml:base="https://jhermann.github.io/blog/python/deployment/2020/03/08/ship_libs_with_shiv.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-03-08-ship_libs_with_shiv.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/copied_from_nb/img/python/python+shiv.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;The-Basic-Idea&quot;&gt;The Basic Idea&lt;a class=&quot;anchor-link&quot; href=&quot;#The-Basic-Idea&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you have a set of Python scripts that are all using the same set of required packages, you can distribute those dependencies in the form of a zipapp, i.e. in a single executable file. See &lt;a href=&quot;https://py-generic-project.readthedocs.io/en/latest/packaging.html#build-zipapps&quot;&gt;Building Zipapps (PEP 441)&lt;/a&gt; for details if you're new to the concept of zipped Python application bundles&lt;/p&gt;
&lt;p&gt;Unlike shipping a script in a virtualenv built within a single project, you can have a project for the base libraries and other projects for the scripts, including scripts written by end users who are just using your dependencies.&lt;/p&gt;
&lt;p&gt;You can also deploy any &lt;em&gt;PyPI&lt;/em&gt; package that way, with a simple call of &lt;code&gt;shiv&lt;/code&gt;, as shown in the next section using &lt;em&gt;Pandas&lt;/em&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;A-Practical-Example&quot;&gt;A Practical Example&lt;a class=&quot;anchor-link&quot; href=&quot;#A-Practical-Example&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The following example uses the well-known &lt;em&gt;Pandas&lt;/em&gt; data science library, but this works for any project built with setuptools or any other build tool creating Python packages that declare their requirements.&lt;/p&gt;
&lt;p&gt;So, to create your base library release artifact, install and call &lt;a href=&quot;https://github.com/linkedin/shiv&quot;&gt;shiv&lt;/a&gt; like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python3.8 -m pip install --user shiv
python3.8 -m shiv -p '/usr/bin/python3.8 -IS' \
                  -o ~/bin/_lib-pandas pandas==1.0.1

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Do this in a virtualenv and leave out the &lt;code&gt;--user&lt;/code&gt; option if you want to keep your account's home directory clean.&lt;/p&gt;
&lt;p&gt;Note that we do not provide an entry point here, which means this zipapp drops into the given Python interpreter and is thus usable &lt;em&gt;as&lt;/em&gt; an interpreter, with the contained  packages available for &lt;code&gt;import&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now we can exploit this to write a script using the zipapp as its interpreter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat &amp;gt;script &amp;lt;&amp;lt;'EOF'
#! /usr/bin/env _lib-pandas
import re
import sys
from pathlib import Path
import pandas as pd

print('Using Pandas from',
      Path(pd.__file__).parent.relative_to(Path.home()),
      '\n\nPython path:')
df = pd.DataFrame(sys.path, columns=['Path'])
df.Path = df.Path.str.replace(f'^{ re.escape(str(Path.home())) }/', '~/')
print(df)
EOF
chmod +x script
./script

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Calling the script produces the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Using Pandas from .shiv/_lib-pandas_23b2…d2/site-packages/pandas 

Python path:
                                                Path
0                                  ~/bin/_lib-pandas
1                              /usr/lib/python38.zip
2                                 /usr/lib/python3.8
3                     /usr/lib/python3.8/lib-dynload
4  ~/.shiv/_lib-pandas_23b2bb7d64c26139950435a64d...

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you're familiar with Pandas, you'll instantly recognize the Python path output as coming from a Pandas data frame. 🎉&lt;/p&gt;
&lt;p&gt;This first execution is a bit slow on startup, because the cache directory you see at the end of the Python path has to be populated first. shiv's boot-strapping code unpacks extension packages containing native code into the file system, so the OS can load them.&lt;/p&gt;
&lt;p&gt;The underscore prefix in the zipapp name indicates this is not a command humans would normally use. Alternatively and especially in production you can deploy into e.g. &lt;code&gt;/usr/local/lib/python3.8/&lt;/code&gt; and then use an absolute path instead of an &lt;code&gt;env&lt;/code&gt; call as the script's interpreter.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jürgen Hermann</name><email>jh@web.de</email></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jhermann.github.io/blog/images/copied_from_nb/img/python/python+shiv.png" /><media:content medium="image" url="https://jhermann.github.io/blog/images/copied_from_nb/img/python/python+shiv.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Installing CLI Tools Using ‘dephell’</title><link href="https://jhermann.github.io/blog/python/deployment/2020/03/03/install_tools_with_dephell.html" rel="alternate" type="text/html" title="Installing CLI Tools Using ‘dephell’" /><published>2020-03-03T00:00:00-06:00</published><updated>2020-03-03T00:00:00-06:00</updated><id>https://jhermann.github.io/blog/python/deployment/2020/03/03/install_tools_with_dephell</id><content type="html" xml:base="https://jhermann.github.io/blog/python/deployment/2020/03/03/install_tools_with_dephell.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-03-03-install_tools_with_dephell.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/copied_from_nb/img/python/dephell-py-prj-mgmt.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Introduction&quot;&gt;Introduction&lt;a class=&quot;anchor-link&quot; href=&quot;#Introduction&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;‘dephell’ is a useful add-on tool for project and venv management that works with existing standard tooling, instead of doing a bad &lt;em&gt;replacement&lt;/em&gt; job like so many others. This post takes a look at how it can take over from &lt;code&gt;pipsi&lt;/code&gt; (Python Script Installer, which is unmaintained) to manage &lt;em&gt;isolated&lt;/em&gt; tool installations by providing each tool with its own virtual environment.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Installation&quot;&gt;Installation&lt;a class=&quot;anchor-link&quot; href=&quot;#Installation&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Dephell is installed via a Python installer script into its own venv (compatible to what &lt;code&gt;dephell&lt;/code&gt; itself creates as a so-called ‘jail’).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -L dephell.org/install | python3

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;dephell&lt;/code&gt; needs at least Python 3.6, which is the default on Ubuntu Bionic, so it &lt;em&gt;just works&lt;/em&gt;™ there. On &lt;em&gt;Xenial&lt;/em&gt;, you need to install 3.6+ from the Deadsnakes PPA first, and pipe the installer script into e.g. &lt;code&gt;python3.8&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The only locations touched by the installer on a Posix host are &lt;code&gt;~/.local/bin/&lt;/code&gt; and &lt;code&gt;~/.local/share/dephell/venvs/&lt;/code&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Going-into-&amp;#8216;jail&amp;#8217;&quot;&gt;Going into &amp;#8216;jail&amp;#8217;&lt;a class=&quot;anchor-link&quot; href=&quot;#Going-into-&amp;#8216;jail&amp;#8217;&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As already mentioned, this post will take a deeper look into the &lt;code&gt;dephell jail&lt;/code&gt; sub-command for venv management.&lt;/p&gt;
&lt;p&gt;Unlike &lt;code&gt;pipsi&lt;/code&gt;, the former go-to tool for that purpose, it is maintained, supports full life-cycle management (i.e. it has a way to remove tool installations), and also supports projects that have several console entry points (i.e. expose more than one command).&lt;/p&gt;
&lt;p&gt;I also like it a lot more than &lt;code&gt;pipx&lt;/code&gt;, which has a similar feature profile when compared to just dephell's &lt;code&gt;jail&lt;/code&gt; sub-command, but YMMV.&lt;/p&gt;
&lt;p&gt;As a first example, to get rid of &lt;code&gt;dephell&lt;/code&gt; again, just remove it using itself:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dephell jail remove dephell

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that doing so leaves anything installed via dephell untouched (i.e. other jails still work), and reinstalling allows to manage those again.&lt;/p&gt;
&lt;p&gt;Adding more tools is done using &lt;code&gt;jail install&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dephell jail install shiv
shiv --version

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make sure that &lt;code&gt;~/.local/bin&lt;/code&gt; is in your &lt;code&gt;PATH&lt;/code&gt;, which is not always the case on older GNU/Linux releases.&lt;/p&gt;
&lt;p&gt;You can easily list what you have installed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dephell jail list
{
  &quot;dephell&quot;: [
    &quot;dephell&quot;
  ],
  &quot;shiv&quot;: [
    &quot;shiv-info&quot;,
    &quot;shiv&quot;
  ]
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, the output is JSON by default and lists all installed tools with their possibly multiple entry points. You can add the &lt;code&gt;--table&lt;/code&gt; option to get output more suited for humans.&lt;/p&gt;
&lt;p&gt;To see more details about a single venv, use &lt;code&gt;jail show&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dephell jail show dephell
{
  &quot;entrypoints&quot;: [
    &quot;dephell&quot;
  ],
  &quot;name&quot;: &quot;dephell&quot;,
  &quot;path&quot;: &quot;/home/jhe/.local/share/dephell/venvs/dephell&quot;,
  &quot;size&quot;: {
    &quot;lib&quot;: &quot;43.21Mb&quot;,
    &quot;total&quot;: &quot;56.78Mb&quot;
  },
  &quot;version&quot;: &quot;0.8.1&quot;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, there is a &lt;code&gt;jail try&lt;/code&gt; command to give new tools a quick spin in a &lt;em&gt;temporary&lt;/em&gt; environment, without leaving any trace of it on your machine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dephell jail try --command &quot;pip --version&quot; pip
…
INFO running...
pip 20.0.2 from /tmp/tmpnm5gvieo/lib/python3.6/site-packages/pip (python 3.6)&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Beyond-&amp;#8216;jail&amp;#8217;&quot;&gt;Beyond &amp;#8216;jail&amp;#8217;&lt;a class=&quot;anchor-link&quot; href=&quot;#Beyond-&amp;#8216;jail&amp;#8217;&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Besides &lt;code&gt;jail&lt;/code&gt;, there are lots of other sub-commands for dependency management, handling docker images, creating common Python software project files, managing and vendoring your project's dependencies, and handling of project-specific venvs. See the full &lt;a href=&quot;https://dephell.readthedocs.io/&quot;&gt;DepHell documentation&lt;/a&gt; for details on that.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jürgen Hermann</name><email>jh@web.de</email></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jhermann.github.io/blog/images/copied_from_nb/img/python/dephell-py-prj-mgmt.png" /><media:content medium="image" url="https://jhermann.github.io/blog/images/copied_from_nb/img/python/dephell-py-prj-mgmt.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Enabling Easy Zipapp Installs on Windows</title><link href="https://jhermann.github.io/blog/python/deployment/2020/02/29/python_zippapps_on_windows.html" rel="alternate" type="text/html" title="Enabling Easy Zipapp Installs on Windows" /><published>2020-02-29T00:00:00-06:00</published><updated>2020-02-29T00:00:00-06:00</updated><id>https://jhermann.github.io/blog/python/deployment/2020/02/29/python_zippapps_on_windows</id><content type="html" xml:base="https://jhermann.github.io/blog/python/deployment/2020/02/29/python_zippapps_on_windows.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-02-29-python_zippapps_on_windows.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/copied_from_nb/img/python/python+windows.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Zipapps-in-a-Nutshell&quot;&gt;Zipapps in a Nutshell&lt;a class=&quot;anchor-link&quot; href=&quot;#Zipapps-in-a-Nutshell&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Zipapps are a way to distribute Python applications
and all of their dependencies in a single binary file.
This is comparable to statically linked golang apps or Java's ‘executable JARs’. 
Their main advantage is that distributing and installing them is quite simple.&lt;/p&gt;
&lt;p&gt;Running Python code directly from ZIP archives is nothing new, &lt;a href=&quot;https://www.python.org/dev/peps/pep-0273/&quot;&gt;PEP 273&lt;/a&gt; made its debut in 2001, as part of Python 2.3 in the form of the &lt;code&gt;zipimport&lt;/code&gt; module.
&lt;a href=&quot;https://www.python.org/dev/peps/pep-0441/&quot;&gt;PEP 441&lt;/a&gt; builds on this and describes mechanisms to bundle full applications into a single ZIP file that can be made executable. It was approved in 2015 and a first implementation appeared in Python 3.5 via the &lt;code&gt;zipapp&lt;/code&gt; module.&lt;/p&gt;
&lt;p&gt;See the PEP for details on how making a ZIP into an executable file works, but basically on POSIX systems the Python interpreter is called in a ‘bang path’ that is followed by the ZIP archive. The interpreter recognizes the ‘script’ is a whole application archive and acts accordingly. On Windows, zipapps &lt;em&gt;MUST&lt;/em&gt; carry the &lt;code&gt;.pyz&lt;/code&gt; extension which is bound to the &lt;code&gt;py&lt;/code&gt; wrapper command, which in turn looks at the bang path and calls a matching Python interpreter from the installed set.&lt;/p&gt;
&lt;p&gt;To display the bang path of a zipapp, use this command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python3 -m zipapp --info foo.pyz

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to change the requested Python version to one that is actually installed or that you prefer, change the bang path as part of the installation process:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python3 -m zipapp -p '/usr/bin/env python3.8' -o ~/bin/foo foo.pyz

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can also be done on an ad-hoc basis, by explicitly calling the desired interpreter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python3.8 foo.pyz …  # POSIX
py -3.8 foo.pyz …    # Windows

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well-known tools to build new zipapps, outside of the Python core, are &lt;a href=&quot;https://github.com/pantsbuild/pex&quot;&gt;pex&lt;/a&gt; (Twitter) and &lt;a href=&quot;https://github.com/linkedin/shiv&quot;&gt;shiv&lt;/a&gt; (LinkedIn). See their documentation for details on bundling your own applications.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Setting-Up-Windows-10-for-Zipapps&quot;&gt;Setting Up Windows 10 for Zipapps&lt;a class=&quot;anchor-link&quot; href=&quot;#Setting-Up-Windows-10-for-Zipapps&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;On Windows, because there is no ‘+x’ flag, things are a bit more complicated than on POSIX.
Zipapps &lt;strong&gt;MUST&lt;/strong&gt; have a &lt;code&gt;.pyz&lt;/code&gt; extension,
for which the &lt;code&gt;py&lt;/code&gt; launcher is registered as the default application.
The net effect is that such files become executable and are handed over to the launcher
&lt;em&gt;if&lt;/em&gt; you add a few environment settings to your machine.&lt;/p&gt;
&lt;p&gt;In the user-specific environment settings, add a new &lt;code&gt;PATHEXT&lt;/code&gt; variable
(or extend an existing one), with the value &lt;code&gt;%PATHEXT%;.PYZ&lt;/code&gt;.
Also edit the &lt;code&gt;PATH&lt;/code&gt; one and add a new &lt;code&gt;%LOCALAPPDATA%\bin&lt;/code&gt; entry.
Save everything (click “OK”), open a &lt;em&gt;new&lt;/em&gt; command window, and verify
the changes with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; echo %PATHEXT% &amp;amp; echo %PATH%

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create the new bin directory by calling &lt;code&gt;md %LOCALAPPDATA%\bin&lt;/code&gt;.
Now you can place a zipapp file like &lt;code&gt;foo.pyz&lt;/code&gt; in that directory,
and it is immediately callable as &lt;code&gt;foo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To get such a test subject, you can build 
&lt;a href=&quot;https://github.com/linkedin/shiv&quot;&gt;shiv&lt;/a&gt; with itself:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/linkedin/shiv.git
cd shiv
py -3 -m venv --prompt shiv venv
venv\Scripts\activate.bat
python -m pip install -e .
shiv -e shiv.cli:main -o %LOCALAPPDATA%\bin\shiv.pyz .
deactivate
shiv --version&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Variations&quot;&gt;Variations&lt;a class=&quot;anchor-link&quot; href=&quot;#Variations&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If that makes more sense to you, you can change the system-wide
variables instead of the user-specific ones, and choose paths that are
global for all users (like &lt;code&gt;C:\usr\bin&lt;/code&gt; or similar).&lt;/p&gt;
&lt;p&gt;To make zipapps available network-wide, you can use &lt;code&gt;%APPDATA%&lt;/code&gt; to store the zipapps,
so you only have to maintain them once in case you regularly
work on several machines in the same network. Just make sure the same version of Python is used everywhere then.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jürgen Hermann</name><email>jh@web.de</email></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jhermann.github.io/blog/images/copied_from_nb/img/python/python+windows.png" /><media:content medium="image" url="https://jhermann.github.io/blog/images/copied_from_nb/img/python/python+windows.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Shell Scripts: env-shebang with Arguments</title><link href="https://jhermann.github.io/blog/linux/know-how/2020/02/28/env_with_arguments.html" rel="alternate" type="text/html" title="Shell Scripts: env-shebang with Arguments" /><published>2020-02-28T00:00:00-06:00</published><updated>2020-02-28T00:00:00-06:00</updated><id>https://jhermann.github.io/blog/linux/know-how/2020/02/28/env_with_arguments</id><content type="html" xml:base="https://jhermann.github.io/blog/linux/know-how/2020/02/28/env_with_arguments.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-02-28-env_with_arguments.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/copied_from_nb/img/linux/linux-shell.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;The-Problem&quot;&gt;The Problem&lt;a class=&quot;anchor-link&quot; href=&quot;#The-Problem&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There is an old annoyance that, if you use &lt;code&gt;env&lt;/code&gt; in a bang path to search the script interpreter in the shell's path, you cannot pass any arguments to it. Instead, all the text after the call to &lt;code&gt;env&lt;/code&gt; is passed as one single argument, and &lt;code&gt;env&lt;/code&gt; tries to find this as the executable to invoke, which fails of course when arguments are present.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;env&lt;/code&gt; is not the culprit here, but the very definition of how a bang path works (quoted from the &lt;code&gt;bash&lt;/code&gt; manpage):&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;If  the  program  is a file beginning with &lt;code&gt;#!&lt;/code&gt;, the remainder of the first line specifies an interpreter for the program.
The shell executes the specified interpreter on operating systems that do not handle this executable format  themselves.
The  &lt;strong&gt;arguments to the interpreter consist of a &lt;em&gt;single&lt;/em&gt; optional argument&lt;/strong&gt; following the interpreter name on the first line…  &lt;em&gt;(emphasis mine)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So what env gets to see in its &lt;code&gt;argv&lt;/code&gt; array when you write something like &lt;code&gt;#! /usr/bin/env python3 -I -S&lt;/code&gt; is &lt;code&gt;['/usr/bin/env', 'python3 -I -S']&lt;/code&gt;. And there is no &lt;code&gt;python3 -I -S&lt;/code&gt; anywhere to be found that could interpret your script. 😞&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;The-Solution&quot;&gt;The Solution&lt;a class=&quot;anchor-link&quot; href=&quot;#The-Solution&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;env&lt;/code&gt; command in coreutils 8.30 solves this (i.e. Debian Buster only so far, Ubuntu Bionic still has 8.28). The relevant change is introducing a split option (&lt;code&gt;-S&lt;/code&gt;), designed to handle that special case of getting all arguments mushed together into one.&lt;/p&gt;
&lt;p&gt;In the example below, we want to pass the &lt;code&gt;-I -S&lt;/code&gt; options to Python on startup. They increase security of a script, by reducing the possible ways an attacker can insert their malicious code into your runtime environment, as you can see from the help text:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-I     : isolate Python from the user's environment (implies -E and -s)
-E     : ignore PYTHON* environment variables (such as PYTHONPATH)
-s     : don't add user site directory to sys.path; also PYTHONNOUSERSITE
-S     : don't imply 'import site' on initialization&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can try the following yourself using &lt;code&gt;docker run --rm -it --entrypoint /bin/bash python:3-slim-buster&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; cat &amp;gt;isolated &amp;lt;&amp;lt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;!/usr/bin/env -S python3 -I -S
&lt;span class=&quot;go&quot;&gt;import sys&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;print(&amp;#39;\n&amp;#39;.join(sys.path))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; chmod +x isolated
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./isolated
&lt;span class=&quot;go&quot;&gt;/usr/local/lib/python38.zip&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;/usr/local/lib/python3.8&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;/usr/local/lib/python3.8/lib-dynload&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Normally, the Python path would include both the current working directory (&lt;code&gt;/&lt;/code&gt; in this case) as well as site packages (&lt;code&gt;/usr/local/lib/python3.8/site-packages&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;However, we prevented their inclusion as a source of unanticipated code – and you can be a happy cat again. 😻&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jürgen Hermann</name><email>jh@web.de</email></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jhermann.github.io/blog/images/copied_from_nb/img/linux/linux-shell.png" /><media:content medium="image" url="https://jhermann.github.io/blog/images/copied_from_nb/img/linux/linux-shell.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Simplify Your Developer Life with `autoenv`</title><link href="https://jhermann.github.io/blog/tools/automation/2020/02/27/autoenv.html" rel="alternate" type="text/html" title="Simplify Your Developer Life with `autoenv`" /><published>2020-02-27T00:00:00-06:00</published><updated>2020-02-27T00:00:00-06:00</updated><id>https://jhermann.github.io/blog/tools/automation/2020/02/27/autoenv</id><content type="html" xml:base="https://jhermann.github.io/blog/tools/automation/2020/02/27/autoenv.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-02-27-autoenv.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;When you work a lot with Python &lt;code&gt;venv&lt;/code&gt;s,
and thus have a lot of them sprinkled over your home directory,
then remembering to activate the right one can be a source of problems,
and is tedious at best.
But there is a solution to automate that chore
– that's what we have those boxes full of electronics for, after all.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Meet-autoenv&quot;&gt;Meet autoenv&lt;a class=&quot;anchor-link&quot; href=&quot;#Meet-autoenv&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Consider this shell session and especially watch what happens to the prompt.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jhe@workstation:~$ which python
/usr/bin/python
jhe@workstation:~$ cd src/github/rituals/
(rituals)jhe@workstation:~/src/github/rituals$ which python
/home/jhe/src/github/rituals/.venv/rituals/bin/python&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/copied_from_nb/img/misc/mind-blown.gif&quot; alt=&quot;It&amp;#39;s Magic!&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The magic wand was originally crafted by Kenneth Reitz,
and can be found on &lt;a href=&quot;https://github.com/inishchith/autoenv&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Installing-autoenv&quot;&gt;Installing autoenv&lt;a class=&quot;anchor-link&quot; href=&quot;#Installing-autoenv&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;To get a working installation, the easiest way is to directly use a git checkout as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p ~/.local
test -d ~/.local/autoenv \
    || git clone &quot;https://github.com/kennethreitz/autoenv.git&quot; \
                 ~/.local/autoenv
echo &amp;gt;&amp;gt;~/.bash_aliases &quot;. ~/.local/autoenv/activate.sh&quot;
. ~/.local/autoenv/activate.sh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That's all there is to it. Now you just have to add a &lt;code&gt;.env&lt;/code&gt; file to your project,
like in this &lt;a href=&quot;https://github.com/jhermann/rituals/blob/master/.env&quot;&gt;example&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Security-Considerations&quot;&gt;Security Considerations&lt;a class=&quot;anchor-link&quot; href=&quot;#Security-Considerations&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you're afraid that the &lt;code&gt;cd&lt;/code&gt; command is wrapped by a bash function,
the following shows that you need not fear,
since that function isn't exported to any scripts you run.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(rituals)jhe@workstation:~/src/github/rituals$ bash &amp;lt;&amp;lt;&amp;lt;&quot;pwd; \
    cd $PWD/../time-tunnel; pwd; which python&quot;
/home/jhe/src/github/rituals
/home/jhe/src/github/time-tunnel
/home/jhe/src/github/rituals/.venv/rituals/bin/python&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This pretty much restricts the modified &lt;code&gt;cd&lt;/code&gt; to interactive use.
Sub-shells behave differently, again that's what you'd expect working at the prompt.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(rituals)jhe@workstation:~/src/github/rituals$ ( pwd; \
    cd $PWD/../time-tunnel; pwd; which python )
/home/jhe/src/github/rituals
/home/jhe/src/github/time-tunnel
/home/jhe/src/github/time-tunnel/.venv/time-tunnel/bin/python&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If at any time you need the original command on the prompt, just use &lt;code&gt;command cd …&lt;/code&gt; or &lt;code&gt;builtin cd …&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Also, nobody can inject code into your shell just so, see what happens if we stumble over
a new or modified &lt;code&gt;.env&lt;/code&gt; file the first time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(rituals)jhe@workstation:~/src/github/rituals$ cd .
(rituals)jhe@workstation:~/src/github/rituals$ echo &amp;gt;&amp;gt;.env
(rituals)jhe@workstation:~/src/github/rituals$ cd .
autoenv:
autoenv: WARNING:
autoenv: This is the first time you are about to source /home/jhe/src/github/rituals/.env:
autoenv:
autoenv:     --- (begin contents) ---------------------------------------
autoenv:     # autoenv script (https://github.com/kennethreitz/autoenv)
autoenv:     test \! -f .venv/$(basename $(pwd))/bin/activate || . .venv/$(basename $(pwd))/bin/activate
autoenv:     
autoenv:
autoenv:     --- (end contents) -----------------------------------------
autoenv:
autoenv: Are you sure you want to allow this? (y/N) y&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you have all the information to decide whether this is something you'd like to use or not.&lt;/p&gt;
&lt;p&gt;I do, but YMMV. 🤔&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jürgen Hermann</name><email>jh@web.de</email></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jhermann.github.io/blog/images/copied_from_nb/img/misc/mind-blown.gif" /><media:content medium="image" url="https://jhermann.github.io/blog/images/copied_from_nb/img/misc/mind-blown.gif" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>